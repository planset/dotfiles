#autodetach on
#bell_msg "^G"

escape ^Tt


defkanji utf-8
defencoding utf-8
encoding utf-8 utf-8

defscrollback 10000

startup_message off

# don't remove windows from the window list as soon as window process exits.
zombie kr #  k: destory window, r: resurrect window

# echo command name whenever a window is created or resurrected.
verbose on

# changes the name of logfile.
logfile 'screen/log/screenlog.%H.%Y%m%d-%02c:%s-%n.%t.log'
logtstamp on
logtstamp string "\n-- SCREEN [%Y/%m/%d %02c:%s] %n:%t --\n"

# changes the directory for hardcopy.
hardcopydir 'screen/hardcopy'
hardcopy_append on

# changes the filename used for reading and writing with the paste buffer.
bufferfile 'screen/screen-exchange'

# changes the kind of messages to the nethack-style.
nethack on

# enable visual vells
#vbell on
vbell off

# disables vbell toggle binding to use ^G as cancel.
bind ^G

# window re-numbering
# override default `N'(number) mapping
bind N colon 'number '

# shortcut of screen sub-command with title option.
bind s colon 'screen -t '

# continuous switch to other window
bind ^N eval 'next' 'command -c cselect'
bind ^P eval 'prev' 'command -c cselect'
bind -c cselect ^N eval 'next' 'command -c cselect'
bind -c cselect ^P eval 'prev' 'command -c cselect'

# refuses yet another hack in rpm packaged screenrc.
# both ] and ^] does write the paste (default unnamed) buffer.
bind ^] paste .

# enable background-color-erase setting.
defbce on

# use bright colors for bold text.
attrcolor b '.I'

# the $TERM variable set to `xterm' for various environment.
term xterm

# enable 256 color
termcapinfo xterm 'Co#256:AB=\E[48;5;%dm:AF=\E[38;5;%dm'

# don't resize terminal width when re-attached.
termcapinfo xterm 'is=\E[r\E[m\E[2J\E[H\E[?7h\E[?1;4;6l'


#windowlist title '%{u .g} Num Flags Title%='
#windowlist string '%4n %{.y}%f%09=%{-} %t %='


# changes the windowlist format to suit caption/hardstatus
windowlist title  '%{u .g}Num Flags Title%=[0-9] select the number [movement] j,C-n:Down k,C-p:Up (C-)f:PageDown (C-)b:PageUp'
windowlist string '%{.g}%3n %{.y}%f%09=%{dg} %t %='
windowlist string '%{.g}%3n %{.y}%f%09=%{-} %t %='

#hardstatus alwayslastline "[%02c] %`%-w%{=b bw}%n %t%{-}%+w %100=%-8=%c:%s"
hardstatus alwayslastline " %`%-w%{=b bw}%n %t%{-}%+w %100=%-8=%c:%s"
hardstatus alwayslastline '%m/%d %02c:%s %{= .g}%H%{-} %L=%-w%45L>%{=u g.}%n %t%{-}%+w %-17<%=%{= .y}(%l)'

#caption always "%{= wb} %-w%{=bu dr}%n %t%{-}%+w %= %{=b wk} [%l] %{=b wb}%y/%m/%d(%D) %{=b wm}%c"
#caption always '%?%F%{= gW}%:%{= Kk}%?%2n%f%07=%t%='
caption always '%?%F%{= gW}%:%{= Kk}%?%2n%f%07=%t%?%P *** copy/paste mode ***%:%?%='


#caption always '%?%F%{= gW}%:%{= Kk}%?%2n%f%07=%t%='
#hardstatus alwayslastline '[windowgroup sample]%L=%-w%45L>%{= gW}%n %t%{-}%+w%{-}%-33<%=screen 4.01.00devel (GNUa805439)'
#windowlist title '%{u .g} Num Flags Title%='
#windowlist string '%4n %{.y}%f%09=%{-} %t %='

# reload
bind ^. source $HOME/.screenrc

# list windows / list windows sorted MRU
bind w  windowlist -b
bind ^W windowlist -b -m

# switch focus to other region(like vim)
# orverride default `k'(kill), `t'(time), `b'(break) mappings.
bind j focus down
bind k focus up
bind t focus top
bind b focus bottom
bind / kill 

# continuous region operations(like vim)
# orverride default `^R'(wrap) mapping.
bind ^R           eval                'command -c region' 'echo "[Region]"'
bind r            eval                'command -c region' 'echo "[Region]"'
bind ^J           eval 'focus down'   'command -c region' 'echo "[Region] (focus down)"'
bind ^K           eval 'focus up'     'command -c region' 'echo "[Region] (focus up)"'
bind -c region ^J eval 'focus down'   'command -c region' 'echo "[Region] (focus up)"'
bind -c region ^K eval 'focus up'     'command -c region' 'echo "[Region] (focus up)"'
bind -c region ^T eval 'focus top'    'command -c region' 'echo "[Region] (focus top)"'
bind -c region ^B eval 'focus bottom' 'command -c region' 'echo "[Region] (focus bottom)"'
bind -c region ^N eval 'focus down'   'command -c region' 'echo "[Region] (focus down)"'
bind -c region ^P eval 'focus up'     'command -c region' 'echo "[Region] (focus up)"'
bind -c region +  eval 'resize +1'    'command -c region' 'echo "[Region] (resize +1)"'
bind -c region -  eval 'resize -1'    'command -c region' 'echo "[Region] (resize -1)"'
bind -c region j  eval 'resize +1'    'command -c region' 'echo "[Region] (resize +1)"'
bind -c region k  eval 'resize -1'    'command -c region' 'echo "[Region] (resize -1)"'
bind -c region J  eval 'resize +10'   'command -c region' 'echo "[Region] (resize +10)"'
bind -c region K  eval 'resize -10'   'command -c region' 'echo "[Region] (resize -10)"'
bind -c region =  eval 'resize ='     'command -c region' 'echo "[Region] (resize =)"'
bind -c region .  eval 'resize min'   'command -c region' 'echo "[Region] (resize min)"'
bind -c region _  eval 'resize max'   'command -c region' 'echo "[Region] (resize max)"'
bind -c region n  eval 'split'        'command -c region' 'echo "[Region] (split)"'
bind -c region s  eval 'split' 'focus down' 'other' 'command -c region' 'echo "[Region] (split)"'
bind -c region c  eval 'remove'       'command -c region' 'echo "[Region] (remove)"'
bind -c region o  eval 'only'         'command -c region' 'echo "[Region] (only)"'
# just a little like emacs
bind -c region 1  eval 'only'         'command -c region' 'echo "[Region] (split)"'
bind -c region 2  eval 'split'        'command -c region' 'echo "[Region] (split)"'


# from http://yskwkzhr.blogspot.com/2011/12/guide-to-using-gnu-screen-layouts.html

# trigger for layout sub-commands
bind ^Y eval 'command -c layout' 'layout show'
bind y  eval 'command -c layout' 'layout show'

# create/remove layout
bind -c layout c eval 'layout new'    'layout show'
bind -c layout X eval 'layout remove' 'layout show'

# change the current layout title or number
bind -c layout A colon 'layout title '
bind -c layout N colon 'layout number '

# switch to the layout identified by number or title (not prefix of a title)
bind -c layout \' eval 'layout select' 'layout show'

# switch to other layout
bind -c layout n eval 'layout next'     'layout show'
bind -c layout p eval 'layout prev'     'layout show'
bind -c layout 0 eval 'layout select 0' 'layout show'
bind -c layout 1 eval 'layout select 1' 'layout show'
bind -c layout 2 eval 'layout select 2' 'layout show'
bind -c layout 3 eval 'layout select 3' 'layout show'
bind -c layout 4 eval 'layout select 4' 'layout show'
bind -c layout 5 eval 'layout select 5' 'layout show'
bind -c layout 6 eval 'layout select 6' 'layout show'
bind -c layout 7 eval 'layout select 7' 'layout show'
bind -c layout 8 eval 'layout select 8' 'layout show'
bind -c layout 9 eval 'layout select 9' 'layout show'

# continuous switch to other layout
bind -c layout ^N eval 'layout next' 'command -c layout' 'layout show'
bind -c layout ^P eval 'layout prev' 'command -c layout' 'layout show'



source ~/.screenrc.dev

source ~/.screenrc.local

